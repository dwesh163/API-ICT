name: Build Docker Image

on:
    push:
        branches:
            - main

permissions:
    contents: write # Grant write permission to the contents

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Get Latest Release
              id: get_release
              run: |
                  latest_release=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name || echo "0.1.0")
                  echo "Latest release: $latest_release"
                  echo "latest_release=$latest_release" >> $GITHUB_ENV

            - name: Increment Minor Version
              id: new_version
              run: |
                  IFS='.' read -r major minor patch <<< "${{ env.latest_release }}"
                  new_version="$major.$((minor + 1)).0"
                  echo "New version: $new_version"
                  echo "new_version=$new_version" >> $GITHUB_ENV

            - name: Get Time of Last Successful Workflow Run
              id: last_run_time
              run: |
                  last_run_time=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=success&branch=${{ github.ref_name }}" \
                    | jq -r '.workflow_runs[0].updated_at')
                  if [ -z "$last_run_time" ]; then
                    last_run_time=$(git log -1 --pretty=format:%cI)
                  fi
                  echo "Last run time: $last_run_time"
                  echo "last_run_time=$last_run_time" >> $GITHUB_ENV

            - name: Generate Changelog
              id: changelog
              run: |
                  changelog=$(git log --since="${{ env.last_run_time }}" --pretty=format:"* %h %s")
                  if [ -z "$changelog" ]; then
                    changelog="No changes."
                  fi
                  echo "Changelog:"
                  echo "$changelog"
                  echo "changelog=$changelog" >> $GITHUB_ENV

            - name: Update CHANGELOG.md
              run: |
                  echo "## Version ${{ env.new_version }}" >> CHANGELOG.md
                  echo "${{ env.changelog }}" >> CHANGELOG.md
                  git config user.name "github-actions[bot]"
                  git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
                  git add CHANGELOG.md
                  git commit -m "Update changelog for version ${{ env.new_version }}"
                  git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

            - name: Create GitHub Release
              uses: actions/create-release@v1
              with:
                  tag_name: ${{ env.new_version }}
                  release_name: ${{ env.new_version }}
                  body: ${{ env.changelog }}
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Convert repository name to lowercase
              run: echo "repository_name=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build and Push Docker Image
              uses: docker/build-push-action@v6
              with:
                  push: true
                  tags: |
                      ${{ github.repository_owner }}/${{ env.repository_name }}:${{ env.new_version }}
                      ${{ github.repository_owner }}/${{ env.repository_name }}:latest
